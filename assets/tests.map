{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","mapofmetal-ember/tests/integration/components/open-seadragon/component-test.js","mapofmetal-ember/tests/integration/helpers/format-name-test.js","mapofmetal-ember/tests/test-helper.js","mapofmetal-ember/tests/unit/application/route-test.js","mapofmetal-ember/tests/unit/index/route-test.js","mapofmetal-ember/tests/unit/services/data-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"mapofmetal-ember/tests/integration/components/open-seadragon/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | open-seadragon', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <OpenSeadragon />\n      */\n      {\n        \"id\": \"zWWNzTfY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"open-seadragon\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <OpenSeadragon>\n              template block text\n            </OpenSeadragon>\n          \n      */\n      {\n        \"id\": \"DH+uyERL\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"open-seadragon\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"mapofmetal-ember/tests/integration/helpers/format-name-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Helper | format-name', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // TODO: Replace this with your real tests.\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{format-name inputValue}}\n      */\n      {\n        \"id\": \"7iHB16eb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"format-name\\\"]}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define(\"mapofmetal-ember/tests/test-helper\", [\"mapofmetal-ember/app\", \"mapofmetal-ember/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"mapofmetal-ember/tests/unit/application/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:application');\n      assert.ok(route);\n    });\n  });\n});","define(\"mapofmetal-ember/tests/unit/index/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define(\"mapofmetal-ember/tests/unit/services/data-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | data', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // TODO: Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:data');\n      assert.ok(service);\n    });\n  });\n});","define('mapofmetal-ember/config/environment', [], function() {\n  var prefix = 'mapofmetal-ember';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('mapofmetal-ember/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}